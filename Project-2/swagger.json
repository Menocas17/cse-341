{
  "swagger": "2.0",
  "info": {
    "title": "Meal Planner API for the CSE341 project",
    "description": "This API allows you to create and manage meal plans as a user and to manage users as an admin.",
    "version": "1.0.0"
  },
  "host": "cse-341-project-2-cdw3.onrender.com",
  "basePath": "/",
  "schemes": ["http", "https"],
  "paths": {
    "/": {
      "get": {
        "description": "Welcome endpoint for the API.",
        "responses": {
          "200": {
            "description": "API is running successfully."
          }
        }
      }
    },
    "/users/get-all-users": {
      "get": {
        "description": "Retrieve a list of all users. Requires admin authorization.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "Bearer token for admin authentication."
          }
        ],
        "responses": {
          "200": {
            "description": "List of users retrieved successfully."
          },
          "401": {
            "description": "Unauthorized. Invalid or missing token."
          },
          "403": {
            "description": "Forbidden. User does not have admin privileges."
          }
        }
      }
    },
    "/users/create": {
      "post": {
        "description": "Create a new user.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              },
              "required": ["username", "email", "password"]
            },
            "description": "User details for creating a new account."
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully."
          },
          "400": {
            "description": "Bad Request. Missing or invalid fields."
          }
        }
      }
    },
    "/users/log-in": {
      "post": {
        "description": "Log in a user and retrieve a token.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              },
              "required": ["email", "password"]
            },
            "description": "User credentials for logging in."
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful. Token returned."
          },
          "401": {
            "description": "Unauthorized. Invalid credentials."
          }
        }
      }
    },
    "/users/auth/google": {
      "get": {
        "description": "Initiate Google OAuth authentication.",
        "responses": {
          "302": {
            "description": "Redirect to Google OAuth."
          }
        }
      }
    },
    "/users/auth/google/callback": {
      "get": {
        "description": "Handle Google OAuth callback.",
        "responses": {
          "200": {
            "description": "Authentication successful. User logged in."
          },
          "400": {
            "description": "Bad Request. Invalid or missing callback parameters."
          }
        }
      }
    },
    "/users/home-panel": {
      "get": {
        "description": "Retrieve the home panel data for the logged-in user.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string",
            "required": true,
            "description": "Bearer token for user authentication."
          }
        ],
        "responses": {
          "200": {
            "description": "Home panel data retrieved successfully."
          },
          "401": {
            "description": "Unauthorized. Invalid or missing token."
          }
        }
      }
    },
    "/users/log-out": {
      "post": {
        "description": "Log out the current user.",
        "responses": {
          "200": {
            "description": "User logged out successfully."
          }
        }
      }
    },
    "/users/update/{user_id}": {
      "put": {
        "description": "Update user details.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the user to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                }
              }
            },
            "description": "Fields to update for the user."
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully."
          },
          "400": {
            "description": "Bad Request. Invalid or missing fields."
          }
        }
      }
    },
    "/users/delete/{user_id}": {
      "delete": {
        "description": "Delete a user by ID.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the user to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },
    "/meals/{user_id}/get-all-meal-plans": {
      "get": {
        "description": "Retrieve all meal plans for a specific user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the user whose meal plans are being retrieved."
          }
        ],
        "responses": {
          "200": {
            "description": "Meal plans retrieved successfully."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },
    "/meals/{meal_plan_id}": {
      "get": {
        "description": "Retrieve details of a specific meal plan.",
        "parameters": [
          {
            "name": "meal_plan_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the meal plan to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "Meal plan details retrieved successfully."
          },
          "404": {
            "description": "Meal plan not found."
          }
        }
      }
    },
    "/meals/{user_id}/create": {
      "post": {
        "description": "Create a new meal plan for a user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the user for whom the meal plan is being created."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              },
              "required": ["name", "description"]
            },
            "description": "Details of the meal plan to create."
          }
        ],
        "responses": {
          "201": {
            "description": "Meal plan created successfully."
          },
          "400": {
            "description": "Bad Request. Missing or invalid fields."
          }
        }
      }
    },
    "/meals/update/{meal_plan_id}/": {
      "put": {
        "description": "Update a specific meal plan.",
        "parameters": [
          {
            "name": "meal_plan_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the meal plan to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              }
            },
            "description": "Fields to update for the meal plan."
          }
        ],
        "responses": {
          "200": {
            "description": "Meal plan updated successfully."
          },
          "400": {
            "description": "Bad Request. Invalid or missing fields."
          }
        }
      }
    },
    "/meals/delete/{meal_plan_id}": {
      "delete": {
        "description": "Delete a specific meal plan.",
        "parameters": [
          {
            "name": "meal_plan_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the meal plan to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Meal plan deleted successfully."
          },
          "404": {
            "description": "Meal plan not found."
          }
        }
      }
    }
  }
}
